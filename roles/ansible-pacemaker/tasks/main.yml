---
- name: Ensure cluster group membership
  fail: msg="Cluster hosts must be members of a group"
  when: pacemaker_ansible_group is not iterable

- name: Ensure the network interface for ring0_addr is not defined when hostnames are used
  fail: msg="If hostnames are used the network interface for ring0_addr must not be defined"
  when: pacemaker_ring0_addr == 'ansible_hostname' and pacemaker_ring0_addr_interface is defined

- name: Ensure the network interface for ring0_addr is defined when IPv4 addresses are used
  fail: msg="If IPv4 addresses are used the network interface for ring0_addr must be defined"
  when: pacemaker_ring0_addr == 'ansible_all_ipv4_addresses' and pacemaker_ring0_addr_interface is undefined

- name: Ensure either hostnames or IPv4 addresses are used for ring0_addr
  fail: msg="Either hostnames or IPv4 addresses must be used for ring0_addr"
  when: not (pacemaker_ring0_addr in ['ansible_hostname', 'ansible_all_ipv4_addresses'])

- name: Install Pacemaker Configuration System package
  yum: name={{ pacemaker_package }} state=installed

- name: Enable and start PCS daemon
  service: name=pcsd enabled=yes state=started

- name: Ensure the password for the cluster user
  user:
    name={{ pacemaker_user }}
    password={{ pacemaker_password | password_hash('sha512', ansible_hostname) }}

- name: Authenticate all nodes using hostnames
  command: >
    pcs cluster auth
    {% for host in groups[pacemaker_ansible_group] %}
    {{ hostvars[host]['ansible_hostname'] }}
    {% endfor %}
    -u {{ pacemaker_user }} -p {{ pacemaker_password }}
  run_once: true
  args:
    creates: /var/lib/pcsd/tokens
  when: pacemaker_ring0_addr == 'ansible_hostname'

- name: Authenticate all nodes using IPv4 addresses on the first network interace
  command: >
    pcs cluster auth
    {% for host in groups[pacemaker_ansible_group] %}
    {{ hostvars[host]['ansible_all_ipv4_addresses'][0] }}
    {% endfor %}
    -u {{ pacemaker_user }} -p {{ pacemaker_password }}
  run_once: true
  args:
    creates: /var/lib/pcsd/tokens
  when: (pacemaker_ring0_addr == 'ansible_all_ipv4_addresses' and
         pacemaker_ring0_addr_interface == 0)

- name: Authenticate all nodes using IPv4 addresses on the second network interace
  command: >
    pcs cluster auth
    {% for host in groups[pacemaker_ansible_group] %}
    {{ hostvars[host]['ansible_all_ipv4_addresses'][1] }}
    {% endfor %}
    -u {{ pacemaker_user }} -p {{ pacemaker_password }}
  run_once: true
  args:
    creates: /var/lib/pcsd/tokens
  when: (pacemaker_ring0_addr == 'ansible_all_ipv4_addresses' and
         pacemaker_ring0_addr_interface == 1)

- name: Setup cluster message bus using hostnames
  run_once: true
  command: >
    pcs cluster setup --name {{ pacemaker_cluster_name }}
    {% for host in groups[pacemaker_ansible_group] %}
    {{ hostvars[host]['ansible_hostname'] }}
    {% endfor %}
  args:
    creates: /etc/corosync/corosync.conf
  when: pacemaker_ring0_addr == 'ansible_hostname'

# - name: Setup cluster message bus using IPv4 addresses on the first network interace
#   run_once: true
#   command: >
#     pcs cluster setup --name {{ pacemaker_cluster_name }}
#     {% for host in groups[pacemaker_ansible_group] %}
#     {{ hostvars[host]['ansible_all_ipv4_addresses'][0] }}
#     {% endfor %}
#   args:
#     creates: /etc/corosync/corosync.conf
#   when: (pacemaker_ring0_addr == 'ansible_all_ipv4_addresses' and
#          pacemaker_ring0_addr_interface == 0)

# - name: Setup cluster message bus using IPv4 addresses on the second network interace
#   run_once: true
#   command: >
#     pcs cluster setup --name {{ pacemaker_cluster_name }}
#     {% for host in groups[pacemaker_ansible_group] %}
#     {{ hostvars[host]['ansible_all_ipv4_addresses'][1] }}
#     {% endfor %}
#   args:
#     creates: /etc/corosync/corosync.conf
#   when: (pacemaker_ring0_addr == 'ansible_all_ipv4_addresses' and
#          pacemaker_ring0_addr_interface == 1)

- name: Start all cluster nodes
  service: name={{ item }} enabled=yes state=started
  with_items:
    - corosync
    - pacemaker

- name: Set cluster properties
  run_once: true
  command: pcs property set {{ item.key | replace('_', '-') }}={{ item.value }}
  with_dict: "{{ pacemaker_properties }}"
  when: pacemaker_properties is defined

- name: Create resources
  run_once: true
  when: pacemaker_resources is defined
  with_items: "{{ pacemaker_resources }}"
  command: >
    pcs resource create {{ item.id }} {{ item.type }}
    {% if item.options is defined %}
      {% for opt, value in item.options.iteritems() %}
        {{ opt }}={{ value }}
      {% endfor %}
    {% endif %}
    {% if item.op is defined %}
      op
      {% for op in item.op %}
        {{ op.action }}
        {% for opt, value in op.options.iteritems() %}
          {{ opt }}={{ value }}
        {% endfor %}
      {% endfor %}
    {% endif %}
    {% if item.meta is defined %}
      meta {{ item.meta.id }}
      {% if item.meta.options is defined %}
        {% for opt, value in item.meta.options.iteritems() %}
          {{ opt }}={{ value }}
        {% endfor %}
      {% endif %}
    {% endif %}
    {% if item.clone is defined %}
      {% if item.clone %} --clone {% endif %}
    {% elif item.masterslave is defined %}
      --master
      {% if item.masterslave.name is defined %}
        {{ item.masterslave.name }}
      {% endif %}
    {% elif item.group is defined %}
      --group {{ item.group.name }}
      {% if item.group.before is defined %}
        --before {{ item.group.before }}
      {% elif item.group.after is defined %}
        --after {{ item.group.after }}
      {% endif %}
    {% endif %}
    {% if item.disabled is defined %}
      {% if item.disabled %} --disabled {% endif %}
    {% endif %}
    {% if item.wait is defined %}
      wait={{ item.wait }}
    {% endif %}
  args:
    creates: /var/lib/pacemaker/pacemaker_resources_created
  register: pacemaker_resources_created

- name: Lock created resources
  run_once: true
  when: pacemaker_resources_created is defined and pacemaker_resources_created.changed
  command: >
    touch /var/lib/pacemaker/pacemaker_resources_created
  args:
    creates: /var/lib/pacemaker/pacemaker_resources_created
